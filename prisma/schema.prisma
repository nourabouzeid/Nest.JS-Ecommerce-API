// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String @unique

  password String
  address  String

  cart   Carts?
  orders Orders[]
}

model Carts {
  cartId  Int           @id @default(autoincrement())
  userId  Int           @unique
  user    Users         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product CartProduct[]
}

model Products {
  productId   Int             @id @default(autoincrement())
  name        String
  description String
  price       Int
  stock       Int
  cart        CartProduct[]
  orders      OrderProducts[]
}

model Orders {
  orderId   Int             @id @default(autoincrement())
  orderDate DateTime        @default(now())
  status    String
  userId    Int
  user      Users           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  products  OrderProducts[]
}

model CartProduct {
  productId Int
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)

  cartId Int
  cart   Carts @relation(fields: [cartId], references: [cartId], onDelete: Cascade)

  quantity Int

  @@id([cartId, productId])
}

model OrderProducts {
  orderId   Int
  order     Orders   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  Products  Products @relation(fields: [productId], references: [productId])
  productId Int
  quantity  Int

  @@id([productId, orderId])
}
